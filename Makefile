PLATFORM ?= linux

CP = /bin/cp
MKDIR = /bin/mkdir -p
MV = /bin/mv
RM = /bin/rm -rf

KERNEL_RELEASE = $(shell uname -r)
KERNEL_DIR = /lib/modules/$(KERNEL_RELEASE)/build

NEPTUNE_SOURCE_DIR = $(CURDIR)/src
NEPTUNE_SOURCES = $(wildcard $(NEPTUNE_SOURCE_DIR)/*.c)
NEPTUNE_INCLUDE_DIR = $(CURDIR)/include
NEPTUNE_MODULE_RULES_DIR = $(CURDIR)/modulerules

CC = /bin/cc
CFLAGS = -Wall -g -I$(NEPTUNE_INCLUDE_DIR) -I$(NEPTUNE_MODULE_RULES_DIR)

ifeq ($(PLATFORM), linux)
	BUILD_DIR = $(CURDIR)/build
else
	BUILD_DIR = $(CURDIR)/build/$(PLATFORM)
endif

TESTS_DIR = $(CURDIR)/tests
TESTS_BUILD_DIR = $(BUILD_DIR)/tests

LOGS_T_TARGET = logs
LOGS_T_BUILD_DIR = $(TESTS_BUILD_DIR)/$(LOGS_T_TARGET).dir
LOGS_T_CFLAGS = -DLOG_LEVEL_3

LOGS_T_SOURCE = $(TESTS_DIR)/$(LOGS_T_TARGET).c
LOGS_T_OBJECT_DIR = $(LOGS_T_BUILD_DIR)/obj
LOGS_T_OBJECT = $(LOGS_T_OBJECT_DIR)/$(LOGS_T_TARGET).o

LOGS_T_SOURCES = $(NEPTUNE_SOURCES) $(LOGS_T_SOURCE)
LOGS_T_OBJECTS = $(patsubst $(NEPTUNE_SOURCE_DIR)/%.c,$(LOGS_T_OBJECT_DIR)/%.o, $(NEPTUNE_SOURCES)) $(LOGS_T_OBJECT)


MODULE_T_NAME = neptune_test_module
MODULE_T_TARGET = module
MODULE_T_BUILD_DIR = $(TESTS_BUILD_DIR)/$(MODULE_T_TARGET).dir
MODULE_T_CFLAGS = -DLOG_LEVEL_3 -DNFILE_DISABLE_READ=1
MODULE_T_FILE = $(MODULE_T_BUILD_DIR)/$(MODULE_T_NAME).ko

MODULE_T_SOURCE = $(TESTS_DIR)/$(MODULE_T_TARGET).c
MODULE_T_OBJECT = $(MODULE_T_BUILD_DIR)/$(MODULE_T_TARGET).o
MODULE_T_MAIN = $(MODULE_T_BUILD_DIR)/$(MODULE_T_NAME).o

MODULE_T_SOURCES = $(NEPTUNE_SOURCES) $(MODULE_T_SOURCE)
MODULE_T_OBJECTS = $(patsubst $(NEPTUNE_SOURCE_DIR)/%.c,$(MODULE_T_BUILD_DIR)/%.o, $(NEPTUNE_SOURCES)) $(MODULE_T_OBJECT)

MODULE_T_MAIN_ND = $(notdir $(MODULE_T_MAIN))
MODULE_T_OBJECTS_ND = $(notdir $(MODULE_T_OBJECTS))

MODULE_KBUILD_FILE = $(MODULE_T_BUILD_DIR)/Kbuild
MODULE_KBUILD_TARGET = $(MODULE_T_TARGET)_kbuild

CREATE_DIRS = $(BUILD_DIR) $(LOGS_T_OBJECT_DIR) $(LOGS_T_BUILD_DIR) $(MODULE_T_BUILD_DIR)

ifeq ($(PLATFORM), windows)
	TARGETS = $(LOGS_T_TARGET)
else ifeq ($(PLATFORM), linux)
	TARGETS = $(LOGS_T_TARGET) $(MODULE_T_TARGET)
else
	TARGETS = $(LOGS_T_TARGET)
endif

.PHONY: default all build create_dirs clean rebuild
default: create_dirs all

all: $(TARGETS)

$(LOGS_T_TARGET): $(LOGS_T_OBJECTS)
	$(CC) $(CFLAGS) -o $(TESTS_BUILD_DIR)/$(LOGS_T_TARGET) $^

$(LOGS_T_OBJECT_DIR)/%.o: $(NEPTUNE_SOURCE_DIR)/%.c
	$(CC) $(CFLAGS) $(LOGS_T_CFLAGS) -c $< -o $@

$(LOGS_T_OBJECT): $(LOGS_T_SOURCE)
	$(CC) $(CFLAGS) $(LOGS_T_CFLAGS) -c $< -o $@

$(MODULE_T_TARGET): $(MODULE_KBUILD_TARGET)
	$(MAKE) -C $(KERNEL_DIR) M=$(MODULE_T_BUILD_DIR) modules

$(MODULE_T_TARGET)_clean:
	$(MAKE) -C $(KERNEL_DIR) M=$(MODULE_T_BUILD_DIR) clean
	$(RM) $(MODULE_T_BUILD_DIR)

MODULE_LOADER = sudo insmod

$(MODULE_T_TARGET)_load:
	$(MODULE_LOADER) $(MODULE_T_FILE)

MODULE_UNLOADER = sudo rmmod

$(MODULE_T_TARGET)_unload:
	-$(MODULE_UNLOADER) $(MODULE_T_NAME)

$(MODULE_T_TARGET)_reload: $(MODULE_T_TARGET)_unload $(MODULE_T_TARGET)_load

$(MODULE_KBUILD_TARGET):
	$(CP) $(MODULE_T_SOURCES) $(MODULE_T_BUILD_DIR)
	$(info $(MODULE_T_SOURCE))

	echo "obj-m := $(MODULE_T_MAIN_ND)" > $(MODULE_KBUILD_FILE)
	echo "$(MODULE_T_NAME)-y := $(MODULE_T_OBJECTS_ND)" >> $(MODULE_KBUILD_FILE)
	echo "ccflags-y := $(CFLAGS)" >> $(MODULE_KBUILD_FILE)
	echo "ccflags-y += $(MODULE_T_CFLAGS)" >> $(MODULE_KBUILD_FILE)

create_dirs:
	$(MKDIR) $(CREATE_DIRS)

clean:
	$(RM) $(CREATE_DIRS)

rebuild: clean all

